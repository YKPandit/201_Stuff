#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>

#define BUF_SIZE 128

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    // handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  struct header *struct1 = (struct header *)sbrk(128);
  struct header *struct2 = (struct header *)sbrk(128);

  struct2->next = struct1;
  struct2->size = 128;
  struct1->next = NULL;
  struct1->size = 128;

  // First block
  /*uint8_t *data1 = (uint8_t*)(struct1 + sizeof(struct header));
  for(int i = 0; i < struct1->size - sizeof(struct header); i++)
  {
    data1[i] = 0;
  }*/

  memset(struct1 + sizeof(struct header), 0,
         (struct1->size - sizeof(struct header)) * sizeof(int));

  // Second block
  /*uint8_t *data2 = (uint8_t*)(struct2 + sizeof(struct header));
  for(int i = 0; i < struct2->size - sizeof(struct header); i++)
  {
    data2[i] = 1;
  }*/
  memset(struct2 + sizeof(struct header), 1,
         (struct2->size - sizeof(struct header)) * sizeof(int));

  print_out("first block: %p\n", struct1, sizeof(struct1));
  print_out("second block: %p\n", struct2, sizeof(struct2));

  print_out("first block size: %d\n", &(struct1->size), sizeof(struct1->size));
  print_out("first block next: %p\n", &(struct1->next), sizeof(struct1->next));

  print_out("second block size: %d\n", &(struct2->size), sizeof(struct2->size));
  print_out("second block next: %p\n", &(struct2->next), sizeof(struct2->next));
}
